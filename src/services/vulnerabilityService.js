// Serviço para integração com a API de Vulnerabilidades
// Baseado nos endpoints fornecidos pelo usuário

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000'

class VulnerabilityService {
  
  // GET /api/vulnerabilities/ - List Vulnerabilities
  async getVulnerabilities() {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Erro ao buscar vulnerabilidades:', error)
      // Fallback para dados mock em caso de erro ou desenvolvimento
      return this.getMockVulnerabilities()
    }
  }

  // POST /api/vulnerabilities/ - Create Vulnerability
  async createVulnerability(vulnerabilityData) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(vulnerabilityData),
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Erro ao criar vulnerabilidade:', error)
      throw error
    }
  }

  // GET /api/vulnerabilities/{vuln_id} - Get Vulnerability
  async getVulnerability(vulnId) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/${vulnId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Erro ao buscar vulnerabilidade:', error)
      throw error
    }
  }

  // PUT /api/vulnerabilities/{vuln_id} - Update Vulnerability
  async updateVulnerability(vulnId, vulnerabilityData) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/${vulnId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(vulnerabilityData),
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Erro ao atualizar vulnerabilidade:', error)
      throw error
    }
  }

  // DELETE /api/vulnerabilities/{vuln_id} - Delete Vulnerability
  async deleteVulnerability(vulnId) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/${vulnId}`, {
        method: 'DELETE'
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return true
    } catch (error) {
      console.error('Erro ao excluir vulnerabilidade:', error)
      throw error
    }
  }

  // GET /api/vulnerabilities/vulnerabilities/grouped-by-criticity - Listar vulnerabilidades agrupadas por criticidade
  async getVulnerabilitiesGroupedByCriticity() {
    try {
      const response = await fetch(`${API_BASE_URL}/api/vulnerabilities/vulnerabilities/grouped-by-criticity`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Erro ao buscar vulnerabilidades agrupadas:', error)
      throw error
    }
  }

  // Métodos auxiliares para gerenciamento local (enquanto não há endpoints específicos)
  
  // Simular soft delete (marcar como excluído)
  async softDeleteVulnerability(vulnId) {
    try {
      // Por enquanto, usar o endpoint de update para marcar como excluído
      return await this.updateVulnerability(vulnId, { is_deleted: true, deleted_at: new Date().toISOString() })
    } catch (error) {
      console.error('Erro ao excluir vulnerabilidade (soft delete):', error)
      throw error
    }
  }

  // Restaurar vulnerabilidade excluída
  async restoreVulnerability(vulnId) {
    try {
      // Por enquanto, usar o endpoint de update para restaurar
      return await this.updateVulnerability(vulnId, { is_deleted: false, deleted_at: null })
    } catch (error) {
      console.error('Erro ao restaurar vulnerabilidade:', error)
      throw error
    }
  }

  // Atualizar prioridade da vulnerabilidade
  async updateVulnerabilityPriority(vulnId, newPriority, newCriticality, customOrder) {
    try {
      const updateData = {
        priority: newPriority,
        criticality: newCriticality,
        custom_order: customOrder,
        updated_at: new Date().toISOString()
      }
      
      return await this.updateVulnerability(vulnId, updateData)
    } catch (error) {
      console.error('Erro ao atualizar prioridade da vulnerabilidade:', error)
      throw error
    }
  }

  // Reordenar vulnerabilidades (drag and drop)
  async reorderVulnerabilities(vulnerabilities) {
    try {
      // Atualizar custom_order de múltiplas vulnerabilidades
      const updatePromises = vulnerabilities.map((vuln, index) => 
        this.updateVulnerability(vuln.id, { 
          custom_order: index + 1,
          updated_at: new Date().toISOString()
        })
      )
      
      return await Promise.all(updatePromises)
    } catch (error) {
      console.error('Erro ao reordenar vulnerabilidades:', error)
      throw error
    }
  }

  // Mapear criticidade para prioridade numérica
  getCriticalityPriority(criticality) {
    const criticalityMap = {
      'CRITICAL': 1,
      'HIGH': 1,
      'MEDIUM': 2,
      'LOW': 3
    }
    return criticalityMap[criticality] || 3
  }

  // Mapear criticidade para texto em português
  getCriticalityText(criticality) {
    const criticalityMap = {
      'CRITICAL': 'Crítica',
      'HIGH': 'Alta',
      'MEDIUM': 'Média',
      'LOW': 'Baixa'
    }
    return criticalityMap[criticality] || 'Desconhecida'
  }

  // Mapear criticidade para cores
  getCriticalityColor(criticality) {
    const colorMap = {
      'CRITICAL': 'bg-red-100 text-red-800 border-red-200',
      'HIGH': 'bg-orange-100 text-orange-800 border-orange-200',
      'MEDIUM': 'bg-yellow-100 text-yellow-800 border-yellow-200',
      'LOW': 'bg-green-100 text-green-800 border-green-200'
    }
    return colorMap[criticality] || 'bg-gray-100 text-gray-800 border-gray-200'
  }

  // Dados mockados para desenvolvimento
  getMockVulnerabilities() {
    return [
      {
        id: '1',
        title: 'SQL Injection na página de login',
        description: 'Vulnerabilidade de injeção de SQL na página de login, permitindo acesso não autorizado ao banco de dados.',
        criticality: 'CRITICAL',
        priority: 1,
        custom_order: 1,
        is_deleted: false,
        created_at: '2025-08-01T10:00:00Z'
      },
      {
        id: '2',
        title: 'Cross-Site Scripting (XSS) em formulário de contato',
        description: 'Falha de XSS refletido no formulário de contato, permitindo a execução de scripts maliciosos no navegador do usuário.',
        criticality: 'HIGH',
        priority: 1,
        custom_order: 2,
        is_deleted: false,
        created_at: '2025-08-02T11:30:00Z'
      },
      {
        id: '3',
        title: 'Exposição de dados sensíveis em API REST',
        description: 'Endpoint da API expondo informações de usuários sem autenticação adequada.',
        criticality: 'CRITICAL',
        priority: 1,
        custom_order: 3,
        is_deleted: false,
        created_at: '2025-08-03T14:00:00Z'
      },
      {
        id: '4',
        title: 'Insecure Direct Object Reference (IDOR) em perfil de usuário',
        description: 'Usuário pode acessar e modificar perfis de outros usuários alterando o ID na URL.',
        criticality: 'HIGH',
        priority: 1,
        custom_order: 4,
        is_deleted: false,
        created_at: '2025-08-04T09:15:00Z'
      },
      {
        id: '5',
        title: 'Broken Authentication em sistema de recuperação de senha',
        description: 'Mecanismo de recuperação de senha fraco, permitindo a redefinição de senhas sem validação robusta.',
        criticality: 'HIGH',
        priority: 1,
        custom_order: 5,
        is_deleted: false,
        created_at: '2025-08-05T16:45:00Z'
      },
      {
        id: '6',
        title: 'Missing Security Headers em resposta HTTP',
        description: 'Cabeçalhos de segurança como Content-Security-Policy e X-Frame-Options ausentes, tornando a aplicação vulnerável a ataques.',
        criticality: 'MEDIUM',
        priority: 2,
        custom_order: 1,
        is_deleted: false,
        created_at: '2025-08-06T10:00:00Z'
      },
      {
        id: '7',
        title: 'Denial of Service (DoS) via XML External Entities (XXE)',
        description: 'Processamento de XML vulnerável a ataques XXE, podendo levar a negação de serviço.',
        criticality: 'MEDIUM',
        priority: 2,
        custom_order: 2,
        is_deleted: false,
        created_at: '2025-08-07T13:00:00Z'
      },
      {
        id: '8',
        title: 'Insecure Deserialization em módulo de upload',
        description: 'Vulnerabilidade de desserialização insegura em um módulo de upload de arquivos, permitindo a execução de código remoto.',
        criticality: 'MEDIUM',
        priority: 2,
        custom_order: 3,
        is_deleted: false,
        created_at: '2025-08-08T08:45:00Z'
      },
      {
        id: '9',
        title: 'Informative Error Messages',
        description: 'Mensagens de erro detalhadas expondo informações sensíveis sobre o sistema.',
        criticality: 'LOW',
        priority: 3,
        custom_order: 1,
        is_deleted: false,
        created_at: '2025-08-09T11:00:00Z'
      },
      {
        id: '10',
        title: 'Clickjacking em página de configurações',
        description: 'Página de configurações vulnerável a clickjacking, permitindo que um atacante engane o usuário a clicar em elementos invisíveis.',
        criticality: 'LOW',
        priority: 3,
        custom_order: 2,
        is_deleted: false,
        created_at: '2025-08-10T15:30:00Z'
      }
    ]
  }
}

// Instância singleton do serviço
const vulnerabilityService = new VulnerabilityService()

export default vulnerabilityService

// Exportar também a classe para casos específicos
export { VulnerabilityService }

